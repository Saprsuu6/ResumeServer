{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "SaprLand API"
  },
  "tags": [
    {
      "name": "Crypto",
      "description": "Cryptocurrency API"
    },
    {
      "name": "TebiIo",
      "description": "Tebi.io Storage API"
    },
    {
      "name": "ConcertPosters",
      "description": "Concert posters API"
    },
    {
      "name": "Auth",
      "description": "User authentication and registration"
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "description": "Registers a new user with a username and password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of the user"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password of the user"
                  }
                },
                "required": ["username", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Пользователь успешно зарегестрирован"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error registering user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login a user",
        "description": "Authenticates a user and returns an access token and refresh token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of the user"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password of the user"
                  }
                },
                "required": ["username", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "The JWT access token"
                    },
                    "refreshToken": {
                      "type": "string",
                      "description": "The refresh token"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid credentials"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error logging in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth-status": {
      "get": {
        "tags": ["Auth"],
        "summary": "Check user authentication status",
        "description": "Checks if the user is authenticated by verifying the access token.",
        "responses": {
          "200": {
            "description": "User is authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Пользователь авторизован"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No access token or authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Нет токена доступа. Пожалуйста, войдите в систему."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid access token or refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Refresh токен недействителен."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log out the user",
        "description": "Logs out the user by clearing the access and refresh tokens from cookies.",
        "responses": {
          "200": {
            "description": "User successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Вы успешно вышли из системы"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error logging out the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/getCryptoInfo": {
      "get": {
        "tags": ["Crypto"],
        "summary": "Get all cryptos",
        "description": "Get all cryptos",
        "responses": {
          "200": {
            "description": "Successful getting all cryptos",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coins"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/uploadMediaToTebiIo": {
      "post": {
        "tags": ["TebiIo"],
        "summary": "Upload multiple media to Tebi.io",
        "description": "Endpoint for uploading multiple media files to Tebi.io storage.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "The array of image files to upload."
                  }
                },
                "required": ["image"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful upload of the medias",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uris": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The URIs of the uploaded medias."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Need at least one file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/deleteMediaFromTebiIo/:id": {
      "delete": {
        "tags": ["TebiIo"],
        "summary": "Delete media from Tebi.io",
        "description": "Delete a media file from Tebi.io storage by its file ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the media file to delete from Tebi.io."
          }
        ],
        "responses": {
          "200": {
            "description": "Media successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "File with ID {id} deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Media not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "File with ID {id} not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error deleting media",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to delete file with ID {id}."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/posters": {
      "post": {
        "tags": ["ConcertPosters"],
        "summary": "Add a new poster",
        "description": "Adds a new concert poster.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConcertPoster"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Poster successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Постер успешно добавлен"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error adding poster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": ["ConcertPosters"],
        "summary": "Get all posters",
        "description": "Retrieve a list of all concert posters.",
        "responses": {
          "200": {
            "description": "Successful retrieval of posters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConcertPoster"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving posters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/posters/byId/{id}": {
      "get": {
        "tags": ["ConcertPosters"],
        "summary": "Get poster by ID",
        "description": "Retrieve a specific poster by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the poster to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the poster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConcertPoster"
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving poster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/posters/{id}": {
      "delete": {
        "tags": ["ConcertPosters"],
        "summary": "Delete poster by ID",
        "description": "Delete a specific poster by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the poster to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Poster successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Постер с id {id} успешно удалён"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error deleting poster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": ["ConcertPosters"],
        "summary": "Update poster by ID",
        "description": "Update the details of a specific poster by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the poster to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConcertPoster"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Poster successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Постер с id {id} успешно обновлён"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error updating poster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Coin": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "usd": {
            "type": "number"
          },
          "usd_24h_change": {
            "type": "number"
          }
        }
      },
      "Coins": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Coin"
        }
      },
      "ConcertPoster": {
        "type": "object",
        "properties": {
          "imageUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ссылка на изображение афиши концерта"
          },
          "eventName": {
            "type": "string",
            "description": "Название концерта"
          },
          "description": {
            "type": "string",
            "description": "Описание концерта"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Дата и время концерта"
          },
          "location": {
            "type": "string",
            "description": "Место проведения концерта"
          },
          "artists": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Список исполнителей"
          },
          "ticketPrice": {
            "type": "number",
            "description": "Стоимость билета"
          },
          "availableTickets": {
            "type": "number",
            "description": "Количество доступных билетов"
          },
          "eventType": {
            "type": "string",
            "description": "Тип мероприятия (например, концерт)"
          },
          "organizer": {
            "type": "string",
            "description": "Организатор концерта"
          }
        }
      },
      "ConcertPosters": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ConcertPoster"
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}
